from pydantic import BaseModel
from typing import List, Optional

# --- Block Schemas ---
# 将BlockData的字段直接合并到Block模式中
class BlockBase(BaseModel):
    hash: str
    index: int
    timestamp: str
    prev_hash: str
    device_id: str
    version: int
    operator: str
    config: str
    diff: str
    change_type: str
    summary: str
    analysis: str
    security_risks: str

class Block(BlockBase):
    class Config:
        orm_mode = True

# 用于从前端接收新配置创建请求的Schema
class BlockCreate(BaseModel):
    config: str
    # AI分析结果由前端提供
    diff: str
    summary: str
    analysis: str
    security_risks: str
    change_type: str
    operator: str

# --- Device Schemas ---
class DeviceBase(BaseModel):
    id: str
    name: str
    ip_address: str
    type: str

class DeviceCreate(DeviceBase):
    pass

class Device(DeviceBase):
    class Config:
        orm_mode = True

# 用于返回包含完整区块链的设备信息
class DeviceWithBlockchain(Device):
    blocks: List[Block] = []


# --- User Schemas ---
class UserBase(BaseModel):
    username: str
    role: str

class UserCreate(UserBase):
    password: str

class User(UserBase):
    id: int

    class Config:
        orm_mode = True

# --- Token Schemas (for authentication) ---
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None
