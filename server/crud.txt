from sqlalchemy.orm import Session
from sqlalchemy import desc
import hashlib
import datetime

# Fix: Changed relative imports to absolute
import models, schemas, security

# --- User CRUD ---

def get_user(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()

def get_user_by_username(db: Session, username: str):
    return db.query(models.User).filter(models.User.username == username).first()

def create_user(db: Session, user: schemas.UserCreate):
    hashed_password = security.get_password_hash(user.password)
    db_user = models.User(username=user.username, hashed_password=hashed_password, role=user.role)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# --- Device CRUD ---

def get_device(db: Session, device_id: str):
    return db.query(models.Device).filter(models.Device.id == device_id).first()

def get_devices(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.Device).offset(skip).limit(limit).all()

def create_device(db: Session, device: schemas.DeviceCreate):
    # Create the device
    db_device = models.Device(
        id=device.id, 
        name=device.name, 
        ip_address=device.ip_address, 
        type=device.type
    )
    db.add(db_device)
    db.commit()
    db.refresh(db_device)

    # Create the genesis block for the new device
    genesis_block_data = schemas.BlockCreate(
        config=f"hostname {device.name}\n!\n! Genesis configuration block.",
        operator="system",
        change_type="genesis",
        summary="Initial block for the new device.",
        analysis="This is the very first block, establishing the device's chain of custody.",
        security_risks="None. Genesis block.",
        diff="+" + f"hostname {device.name}\n!\n! Genesis configuration block."
    )
    add_block(db=db, block=genesis_block_data, device_id=device.id)

    # Refresh the device object to load the newly created block relationship
    db.refresh(db_device)
    return db_device

def delete_device(db: Session, device_id: str):
    db_device = db.query(models.Device).filter(models.Device.id == device_id).first()
    if db_device:
        db.delete(db_device)
        db.commit()

# --- Block CRUD ---

def get_blocks_for_device(db: Session, device_id: str):
    return db.query(models.Block).filter(models.Block.device_id == device_id).order_by(desc(models.Block.index)).all()

def get_latest_block(db: Session, device_id: str) -> models.Block | None:
    return db.query(models.Block).filter(models.Block.device_id == device_id).order_by(desc(models.Block.index)).first()

def add_block(db: Session, block: schemas.BlockCreate, device_id: str):
    last_block = get_latest_block(db, device_id)
    
    if last_block:
        index = last_block.index + 1
        version = last_block.version + 1
        prev_hash = last_block.hash
    else: # Genesis block case
        index = 0
        version = 1
        prev_hash = "0"
        
    timestamp = datetime.datetime.utcnow()
    
    # Calculate hash
    block_string = f"{index}{timestamp}{prev_hash}{device_id}{block.config}{block.operator}".encode('utf-8')
    hash_value = hashlib.sha256(block_string).hexdigest()
    
    db_block = models.Block(
        hash=hash_value,
        index=index,
        timestamp=timestamp,
        prev_hash=prev_hash,
        device_id=device_id,
        version=version,
        operator=block.operator,
        config=block.config,
        diff=block.diff,
        change_type=block.change_type,
        summary=block.summary,
        analysis=block.analysis,
        security_risks=block.security_risks
    )
    
    db.add(db_block)
    db.commit()
    db.refresh(db_block)
    return db_block
